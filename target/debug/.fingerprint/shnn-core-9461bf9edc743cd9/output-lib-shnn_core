{"$message_type":"diagnostic","message":"unused import: `NeuronId`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":239,"byte_end":247,"line_start":7,"line_end":7,"column_start":13,"column_end":21,"is_primary":true,"text":[{"text":"    spike::{NeuronId, Spike},","highlight_start":13,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":238,"byte_end":239,"line_start":7,"line_end":7,"column_start":12,"column_end":13,"is_primary":true,"text":[{"text":"    spike::{NeuronId, Spike},","highlight_start":12,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":239,"byte_end":249,"line_start":7,"line_end":7,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"    spike::{NeuronId, Spike},","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":254,"byte_end":255,"line_start":7,"line_end":7,"column_start":28,"column_end":29,"is_primary":true,"text":[{"text":"    spike::{NeuronId, Spike},","highlight_start":28,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `NeuronId`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:7:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    spike::{NeuronId, Spike},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `PlasticityRule`, `SpikeEncoder`, and `types::SpikeRoute`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":301,"byte_end":318,"line_start":8,"line_end":8,"column_start":62,"column_end":79,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, PlasticConnectivity, types::SpikeRoute},","highlight_start":62,"highlight_end":79}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":414,"byte_end":428,"line_start":11,"line_end":11,"column_start":18,"column_end":32,"is_primary":true,"text":[{"text":"    plasticity::{PlasticityRule, STDPConfig},","highlight_start":18,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":458,"byte_end":470,"line_start":12,"line_end":12,"column_start":16,"column_end":28,"is_primary":true,"text":[{"text":"    encoding::{SpikeEncoder, MultiModalEncoder},","highlight_start":16,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":299,"byte_end":318,"line_start":8,"line_end":8,"column_start":60,"column_end":79,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, PlasticConnectivity, types::SpikeRoute},","highlight_start":60,"highlight_end":79}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":413,"byte_end":414,"line_start":11,"line_end":11,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    plasticity::{PlasticityRule, STDPConfig},","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":414,"byte_end":430,"line_start":11,"line_end":11,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"    plasticity::{PlasticityRule, STDPConfig},","highlight_start":18,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":440,"byte_end":441,"line_start":11,"line_end":11,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    plasticity::{PlasticityRule, STDPConfig},","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":457,"byte_end":458,"line_start":12,"line_end":12,"column_start":15,"column_end":16,"is_primary":true,"text":[{"text":"    encoding::{SpikeEncoder, MultiModalEncoder},","highlight_start":15,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":458,"byte_end":472,"line_start":12,"line_end":12,"column_start":16,"column_end":30,"is_primary":true,"text":[{"text":"    encoding::{SpikeEncoder, MultiModalEncoder},","highlight_start":16,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":489,"byte_end":490,"line_start":12,"line_end":12,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"    encoding::{SpikeEncoder, MultiModalEncoder},","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `PlasticityRule`, `SpikeEncoder`, and `types::SpikeRoute`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/mod.rs:8:62\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    connectivity::{NetworkConnectivity, PlasticConnectivity, types::SpikeRoute},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    plasticity::{PlasticityRule, STDPConfig},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    encoding::{SpikeEncoder, MultiModalEncoder},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `core::fmt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":547,"byte_end":556,"line_start":16,"line_end":16,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::fmt;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":543,"byte_end":558,"line_start":16,"line_end":17,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use core::fmt;","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `core::fmt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/mod.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::fmt;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `NetworkStats` and `types::ConnectivityStats`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":262,"byte_end":286,"line_start":7,"line_end":7,"column_start":41,"column_end":65,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, types::ConnectivityStats},","highlight_start":41,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":336,"byte_end":348,"line_start":8,"line_end":8,"column_start":48,"column_end":60,"is_primary":true,"text":[{"text":"    network::{SpikeNetwork, PlasticityManager, NetworkStats},","highlight_start":48,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":240,"byte_end":241,"line_start":7,"line_end":7,"column_start":19,"column_end":20,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, types::ConnectivityStats},","highlight_start":19,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":260,"byte_end":286,"line_start":7,"line_end":7,"column_start":39,"column_end":65,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, types::ConnectivityStats},","highlight_start":39,"highlight_end":65}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":286,"byte_end":287,"line_start":7,"line_end":7,"column_start":65,"column_end":66,"is_primary":true,"text":[{"text":"    connectivity::{NetworkConnectivity, types::ConnectivityStats},","highlight_start":65,"highlight_end":66}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":334,"byte_end":348,"line_start":8,"line_end":8,"column_start":46,"column_end":60,"is_primary":true,"text":[{"text":"    network::{SpikeNetwork, PlasticityManager, NetworkStats},","highlight_start":46,"highlight_end":60}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `NetworkStats` and `types::ConnectivityStats`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/builder.rs:7:41\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    connectivity::{NetworkConnectivity, types::ConnectivityStats},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    network::{SpikeNetwork, PlasticityManager, NetworkStats},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Channel`, `Receiver`, `Sender`, `TaskHandle`, `Task`, `executor::Executor`, `runtime::Runtime`, `timer::Timer`, and `waker::CustomWaker`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":664,"byte_end":680,"line_start":24,"line_end":24,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"    runtime::Runtime,","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":693,"byte_end":697,"line_start":25,"line_end":25,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    task::{Task, TaskHandle},","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":699,"byte_end":709,"line_start":25,"line_end":25,"column_start":18,"column_end":28,"is_primary":true,"text":[{"text":"    task::{Task, TaskHandle},","highlight_start":18,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":716,"byte_end":734,"line_start":26,"line_end":26,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    executor::Executor,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":740,"byte_end":752,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    timer::Timer,","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":758,"byte_end":776,"line_start":28,"line_end":28,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    waker::CustomWaker,","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":789,"byte_end":796,"line_start":29,"line_end":29,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"    sync::{Channel, Receiver, Sender},","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":798,"byte_end":806,"line_start":29,"line_end":29,"column_start":21,"column_end":29,"is_primary":true,"text":[{"text":"    sync::{Channel, Receiver, Sender},","highlight_start":21,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":808,"byte_end":814,"line_start":29,"line_end":29,"column_start":31,"column_end":37,"is_primary":true,"text":[{"text":"    sync::{Channel, Receiver, Sender},","highlight_start":31,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":608,"byte_end":820,"line_start":22,"line_end":31,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(feature = \"async\")]","highlight_start":1,"highlight_end":26},{"text":"use shnn_async_runtime::{","highlight_start":1,"highlight_end":26},{"text":"    runtime::Runtime,","highlight_start":1,"highlight_end":22},{"text":"    task::{Task, TaskHandle},","highlight_start":1,"highlight_end":30},{"text":"    executor::Executor,","highlight_start":1,"highlight_end":24},{"text":"    timer::Timer,","highlight_start":1,"highlight_end":18},{"text":"    waker::CustomWaker,","highlight_start":1,"highlight_end":24},{"text":"    sync::{Channel, Receiver, Sender},","highlight_start":1,"highlight_end":39},{"text":"};","highlight_start":1,"highlight_end":3},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Channel`, `Receiver`, `Sender`, `TaskHandle`, `Task`, `executor::Executor`, `runtime::Runtime`, `timer::Timer`, and `waker::CustomWaker`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/async_processing.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    runtime::Runtime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    task::{Task, TaskHandle},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    executor::Executor,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    timer::Timer,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    waker::CustomWaker,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    sync::{Channel, Receiver, Sender},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Deserialize` and `Serialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":965,"byte_end":974,"line_start":40,"line_end":40,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"use shnn_serialize::{Serialize, Deserialize};","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":976,"byte_end":987,"line_start":40,"line_end":40,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"use shnn_serialize::{Serialize, Deserialize};","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/async_processing.rs","byte_start":914,"byte_end":990,"line_start":39,"line_end":41,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(feature = \"serialize\")]","highlight_start":1,"highlight_end":30},{"text":"use shnn_serialize::{Serialize, Deserialize};","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Deserialize` and `Serialize`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/async_processing.rs:40:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse shnn_serialize::{Serialize, Deserialize};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `BinaryDecoder`, `BinaryEncoder`, `BufferMut`, `Buffer`, `Deserialize`, `LayerState`, `NeuralSerializer`, `Serialize`, `SpikeEvent`, `WeightMatrix`, and `ZeroCopyBuffer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":494,"byte_end":503,"line_start":17,"line_end":17,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":505,"byte_end":516,"line_start":17,"line_end":17,"column_start":16,"column_end":27,"is_primary":true,"text":[{"text":"    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,","highlight_start":16,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":518,"byte_end":531,"line_start":17,"line_end":17,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,","highlight_start":29,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":533,"byte_end":546,"line_start":17,"line_end":17,"column_start":44,"column_end":57,"is_primary":true,"text":[{"text":"    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,","highlight_start":44,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":552,"byte_end":558,"line_start":18,"line_end":18,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Buffer, BufferMut, ZeroCopyBuffer,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":560,"byte_end":569,"line_start":18,"line_end":18,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    Buffer, BufferMut, ZeroCopyBuffer,","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":571,"byte_end":585,"line_start":18,"line_end":18,"column_start":24,"column_end":38,"is_primary":true,"text":[{"text":"    Buffer, BufferMut, ZeroCopyBuffer,","highlight_start":24,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":600,"byte_end":610,"line_start":19,"line_end":19,"column_start":14,"column_end":24,"is_primary":true,"text":[{"text":"    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},","highlight_start":14,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":612,"byte_end":624,"line_start":19,"line_end":19,"column_start":26,"column_end":38,"is_primary":true,"text":[{"text":"    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},","highlight_start":26,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":626,"byte_end":636,"line_start":19,"line_end":19,"column_start":40,"column_end":50,"is_primary":true,"text":[{"text":"    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},","highlight_start":40,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":638,"byte_end":654,"line_start":19,"line_end":19,"column_start":52,"column_end":68,"is_primary":true,"text":[{"text":"    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},","highlight_start":52,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/serialization.rs","byte_start":438,"byte_end":660,"line_start":15,"line_end":21,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"#[cfg(feature = \"serialize\")]","highlight_start":1,"highlight_end":30},{"text":"use shnn_serialize::{","highlight_start":1,"highlight_end":22},{"text":"    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,","highlight_start":1,"highlight_end":58},{"text":"    Buffer, BufferMut, ZeroCopyBuffer,","highlight_start":1,"highlight_end":39},{"text":"    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},","highlight_start":1,"highlight_end":70},{"text":"};","highlight_start":1,"highlight_end":3},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BinaryDecoder`, `BinaryEncoder`, `BufferMut`, `Buffer`, `Deserialize`, `LayerState`, `NeuralSerializer`, `Serialize`, `SpikeEvent`, `WeightMatrix`, and `ZeroCopyBuffer`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/serialization.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Serialize, Deserialize, BinaryEncoder, BinaryDecoder,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Buffer, BufferMut, ZeroCopyBuffer,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    neural::{SpikeEvent, WeightMatrix, LayerState, NeuralSerializer},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `LIFConfig`, `LIFNeuron`, and `network::SpikeNetwork`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/lib.rs","byte_start":4952,"byte_end":4973,"line_start":166,"line_end":166,"column_start":9,"column_end":30,"is_primary":true,"text":[{"text":"        network::SpikeNetwork,","highlight_start":9,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/lib.rs","byte_start":4992,"byte_end":5001,"line_start":167,"line_end":167,"column_start":18,"column_end":27,"is_primary":true,"text":[{"text":"        neuron::{LIFNeuron, LIFConfig},","highlight_start":18,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/lib.rs","byte_start":5003,"byte_end":5012,"line_start":167,"line_end":167,"column_start":29,"column_end":38,"is_primary":true,"text":[{"text":"        neuron::{LIFNeuron, LIFConfig},","highlight_start":29,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/lib.rs","byte_start":4903,"byte_end":4913,"line_start":164,"line_end":165,"column_start":16,"column_end":9,"is_primary":true,"text":[{"text":"    use crate::{","highlight_start":16,"highlight_end":17},{"text":"        hypergraph::HypergraphNetwork,","highlight_start":1,"highlight_end":9}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/lib.rs","byte_start":4942,"byte_end":5013,"line_start":165,"line_end":167,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"        hypergraph::HypergraphNetwork,","highlight_start":38,"highlight_end":39},{"text":"        network::SpikeNetwork,","highlight_start":1,"highlight_end":31},{"text":"        neuron::{LIFNeuron, LIFConfig},","highlight_start":1,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"crates/shnn-core/src/lib.rs","byte_start":5013,"byte_end":5020,"line_start":167,"line_end":168,"column_start":39,"column_end":6,"is_primary":true,"text":[{"text":"        neuron::{LIFNeuron, LIFConfig},","highlight_start":39,"highlight_end":40},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `LIFConfig`, `LIFNeuron`, and `network::SpikeNetwork`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/lib.rs:166:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        network::SpikeNetwork,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        neuron::{LIFNeuron, LIFConfig},\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"duplicate definitions with name `plastic_update`","code":{"code":"E0592","explanation":"This error occurs when you defined methods or associated functions with same\nname.\n\nErroneous code example:\n\n```compile_fail,E0592\nstruct Foo;\n\nimpl Foo {\n    fn bar() {} // previous definition here\n}\n\nimpl Foo {\n    fn bar() {} // duplicate definition here\n}\n```\n\nA similar error is E0201. The difference is whether there is one declaration\nblock or not. To avoid this error, you must give each `fn` a unique name.\n\n```\nstruct Foo;\n\nimpl Foo {\n    fn bar() {}\n}\n\nimpl Foo {\n    fn baz() {} // define with different name\n}\n```\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":14033,"byte_end":14127,"line_start":420,"line_end":420,"column_start":5,"column_end":99,"is_primary":true,"text":[{"text":"    fn plastic_update(&mut self, pre_spike: &Spike, post_spike: &Spike, weight: f32) -> Result<()> {","highlight_start":5,"highlight_end":99}],"label":"duplicate definitions for `plastic_update`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":15049,"byte_end":15143,"line_start":459,"line_end":459,"column_start":5,"column_end":99,"is_primary":false,"text":[{"text":"    fn plastic_update(&mut self, pre_spike: &Spike, post_spike: &Spike, weight: f32) -> Result<()> {","highlight_start":5,"highlight_end":99}],"label":"other definition for `plastic_update`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0592]\u001b[0m\u001b[0m\u001b[1m: duplicate definitions with name `plastic_update`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/mod.rs:420:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn plastic_update(&mut self, pre_spike: &Spike, post_spike: &Spike, weight: f32) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mduplicate definitions for `plastic_update`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m459\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn plastic_update(&mut self, pre_spike: &Spike, post_spike: &Spike, weight: f32) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mother definition for `plastic_update`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":2929,"byte_end":2939,"line_start":88,"line_end":88,"column_start":48,"column_end":58,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.add_connection(connection),","highlight_start":48,"highlight_end":58}],"label":"expected `GraphConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":2914,"byte_end":2928,"line_start":88,"line_end":88,"column_start":33,"column_end":47,"is_primary":false,"text":[{"text":"            Self::Graph(g) => g.add_connection(connection),","highlight_start":33,"highlight_end":47}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `GraphConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2503,"byte_end":2517,"line_start":84,"line_end":84,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    fn add_connection(","highlight_start":8,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":2939,"byte_end":2939,"line_start":88,"line_end":88,"column_start":58,"column_end":58,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.add_connection(connection),","highlight_start":58,"highlight_end":58}],"label":null,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:88:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Graph(g) => g.add_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `GraphConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mGraphConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:84:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::Graph(g) => g.add_connection(connection\u001b[0m\u001b[0m\u001b[38;5;10m.into()\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":2990,"byte_end":3000,"line_start":89,"line_end":89,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            Self::Matrix(m) => m.add_connection(connection),","highlight_start":49,"highlight_end":59}],"label":"expected `MatrixConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":2975,"byte_end":2989,"line_start":89,"line_end":89,"column_start":34,"column_end":48,"is_primary":false,"text":[{"text":"            Self::Matrix(m) => m.add_connection(connection),","highlight_start":34,"highlight_end":48}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `MatrixConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2503,"byte_end":2517,"line_start":84,"line_end":84,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    fn add_connection(","highlight_start":8,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:89:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Matrix(m) => m.add_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `MatrixConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMatrixConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:84:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3051,"byte_end":3061,"line_start":90,"line_end":90,"column_start":49,"column_end":59,"is_primary":true,"text":[{"text":"            Self::Sparse(s) => s.add_connection(connection),","highlight_start":49,"highlight_end":59}],"label":"expected `SparseConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3036,"byte_end":3050,"line_start":90,"line_end":90,"column_start":34,"column_end":48,"is_primary":false,"text":[{"text":"            Self::Sparse(s) => s.add_connection(connection),","highlight_start":34,"highlight_end":48}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `SparseConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2503,"byte_end":2517,"line_start":84,"line_end":84,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    fn add_connection(","highlight_start":8,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:90:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Sparse(s) => s.add_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `SparseConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSparseConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:84:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3257,"byte_end":3267,"line_start":96,"line_end":96,"column_start":51,"column_end":61,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.remove_connection(connection),","highlight_start":51,"highlight_end":61}],"label":"expected `GraphConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3239,"byte_end":3256,"line_start":96,"line_end":96,"column_start":33,"column_end":50,"is_primary":false,"text":[{"text":"            Self::Graph(g) => g.remove_connection(connection),","highlight_start":33,"highlight_end":50}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `GraphConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2822,"byte_end":2839,"line_start":96,"line_end":96,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    fn remove_connection(","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3267,"byte_end":3267,"line_start":96,"line_end":96,"column_start":61,"column_end":61,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.remove_connection(connection),","highlight_start":61,"highlight_end":61}],"label":null,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:96:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Graph(g) => g.remove_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `GraphConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mGraphConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:96:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::Graph(g) => g.remove_connection(connection\u001b[0m\u001b[0m\u001b[38;5;10m.into()\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3237,"byte_end":3268,"line_start":96,"line_end":96,"column_start":31,"column_end":62,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.remove_connection(connection),","highlight_start":31,"highlight_end":62}],"label":"expected `Result<Option<SpikeRoute>, ...>`, found `Result<Option<GraphRouteInfo>, ...>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3152,"byte_end":3183,"line_start":94,"line_end":94,"column_start":72,"column_end":103,"is_primary":false,"text":[{"text":"    fn remove_connection(&mut self, connection: Self::ConnectionId) -> Result<Option<Self::RouteInfo>> {","highlight_start":72,"highlight_end":103}],"label":"expected `std::result::Result<Option<types::SpikeRoute>, SHNNError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<Option<types::SpikeRoute>, _>`\n   found enum `std::result::Result<Option<GraphRouteInfo>, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:96:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_connection(&mut self, connection: Self::ConnectionId) -> Result<Option<Self::RouteInfo>> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `std::result::Result<Option<types::SpikeRoute>, SHNNError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Graph(g) => g.remove_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<Option<SpikeRoute>, ...>`, found `Result<Option<GraphRouteInfo>, ...>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::result::Result<Option<\u001b[0m\u001b[0m\u001b[1m\u001b[35mtypes::SpikeRoute\u001b[0m\u001b[0m>, _>`\u001b[0m\n\u001b[0m              found enum `std::result::Result<Option<\u001b[0m\u001b[0m\u001b[1m\u001b[35mGraphRouteInfo\u001b[0m\u001b[0m>, _>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3321,"byte_end":3331,"line_start":97,"line_end":97,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"            Self::Matrix(m) => m.remove_connection(connection),","highlight_start":52,"highlight_end":62}],"label":"expected `MatrixConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3303,"byte_end":3320,"line_start":97,"line_end":97,"column_start":34,"column_end":51,"is_primary":false,"text":[{"text":"            Self::Matrix(m) => m.remove_connection(connection),","highlight_start":34,"highlight_end":51}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `MatrixConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2822,"byte_end":2839,"line_start":96,"line_end":96,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    fn remove_connection(","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:97:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Matrix(m) => m.remove_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `MatrixConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMatrixConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:96:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3385,"byte_end":3395,"line_start":98,"line_end":98,"column_start":52,"column_end":62,"is_primary":true,"text":[{"text":"            Self::Sparse(s) => s.remove_connection(connection),","highlight_start":52,"highlight_end":62}],"label":"expected `SparseConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3367,"byte_end":3384,"line_start":98,"line_end":98,"column_start":34,"column_end":51,"is_primary":false,"text":[{"text":"            Self::Sparse(s) => s.remove_connection(connection),","highlight_start":34,"highlight_end":51}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `SparseConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":2822,"byte_end":2839,"line_start":96,"line_end":96,"column_start":8,"column_end":25,"is_primary":true,"text":[{"text":"    fn remove_connection(","highlight_start":8,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:98:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Sparse(s) => s.remove_connection(connection),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `SparseConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSparseConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:96:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove_connection(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3588,"byte_end":3598,"line_start":104,"line_end":104,"column_start":47,"column_end":57,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.update_weight(connection, new_weight),","highlight_start":47,"highlight_end":57}],"label":"expected `GraphConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3574,"byte_end":3587,"line_start":104,"line_end":104,"column_start":33,"column_end":46,"is_primary":false,"text":[{"text":"            Self::Graph(g) => g.update_weight(connection, new_weight),","highlight_start":33,"highlight_end":46}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `GraphConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":3199,"byte_end":3212,"line_start":109,"line_end":109,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn update_weight(","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3598,"byte_end":3598,"line_start":104,"line_end":104,"column_start":57,"column_end":57,"is_primary":true,"text":[{"text":"            Self::Graph(g) => g.update_weight(connection, new_weight),","highlight_start":57,"highlight_end":57}],"label":null,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:104:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Graph(g) => g.update_weight(connection, new_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `GraphConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mGraphConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:109:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn update_weight(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: call `Into::into` on this expression to convert `(NeuronId, NeuronId)` into `GraphConnectionId`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            Self::Graph(g) => g.update_weight(connection\u001b[0m\u001b[0m\u001b[38;5;10m.into()\u001b[0m\u001b[0m, new_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3660,"byte_end":3670,"line_start":105,"line_end":105,"column_start":48,"column_end":58,"is_primary":true,"text":[{"text":"            Self::Matrix(m) => m.update_weight(connection, new_weight),","highlight_start":48,"highlight_end":58}],"label":"expected `MatrixConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3646,"byte_end":3659,"line_start":105,"line_end":105,"column_start":34,"column_end":47,"is_primary":false,"text":[{"text":"            Self::Matrix(m) => m.update_weight(connection, new_weight),","highlight_start":34,"highlight_end":47}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `MatrixConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":3199,"byte_end":3212,"line_start":109,"line_end":109,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn update_weight(","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:105:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Matrix(m) => m.update_weight(connection, new_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `MatrixConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMatrixConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:109:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn update_weight(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3732,"byte_end":3742,"line_start":106,"line_end":106,"column_start":48,"column_end":58,"is_primary":true,"text":[{"text":"            Self::Sparse(s) => s.update_weight(connection, new_weight),","highlight_start":48,"highlight_end":58}],"label":"expected `SparseConnectionId`, found `(NeuronId, NeuronId)`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":3718,"byte_end":3731,"line_start":106,"line_end":106,"column_start":34,"column_end":47,"is_primary":false,"text":[{"text":"            Self::Sparse(s) => s.update_weight(connection, new_weight),","highlight_start":34,"highlight_end":47}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `SparseConnectionId`\n    found tuple `(NeuronId, NeuronId)`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"crates/shnn-core/src/connectivity/mod.rs","byte_start":3199,"byte_end":3212,"line_start":109,"line_end":109,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    fn update_weight(","highlight_start":8,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:106:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Sparse(s) => s.update_weight(connection, new_weight),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `SparseConnectionId`, found `(NeuronId, NeuronId)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSparseConnectionId\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                found tuple `\u001b[0m\u001b[0m\u001b[1m\u001b[35m(NeuronId, NeuronId)\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/mod.rs:109:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn update_weight(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`match` arms have incompatible types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":5446,"byte_end":5483,"line_start":164,"line_end":164,"column_start":32,"column_end":69,"is_primary":true,"text":[{"text":"            Self::Matrix(m) => m.get_weight(pre_neuron, post_neuron),","highlight_start":32,"highlight_end":69}],"label":"expected `Result<Option<f32>, SHNNError>`, found `Result<f32, SHNNError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":5376,"byte_end":5413,"line_start":163,"line_end":163,"column_start":31,"column_end":68,"is_primary":false,"text":[{"text":"            Self::Graph(g) => g.get_weight(pre_neuron, post_neuron),","highlight_start":31,"highlight_end":68}],"label":"this is found to be of type `std::result::Result<Option<f32>, SHNNError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"crates/shnn-core/src/connectivity/plastic_enum.rs","byte_start":5333,"byte_end":5564,"line_start":162,"line_end":166,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match self {","highlight_start":9,"highlight_end":21},{"text":"            Self::Graph(g) => g.get_weight(pre_neuron, post_neuron),","highlight_start":1,"highlight_end":69},{"text":"            Self::Matrix(m) => m.get_weight(pre_neuron, post_neuron),","highlight_start":1,"highlight_end":70},{"text":"            Self::Sparse(s) => s.get_weight(pre_neuron, post_neuron),","highlight_start":1,"highlight_end":70},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"`match` arms have incompatible types","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `std::result::Result<Option<f32>, _>`\n   found enum `std::result::Result<f32, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: `match` arms have incompatible types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/plastic_enum.rs:164:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Graph(g) => g.get_weight(pre_neuron, post_neuron),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis is found to be of type `std::result::Result<Option<f32>, SHNNError>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Matrix(m) => m.get_weight(pre_neuron, post_neuron),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Result<Option<f32>, SHNNError>`, found `Result<f32, SHNNError>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::Sparse(s) => s.get_weight(pre_neuron, post_neuron),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`match` arms have incompatible types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `std::result::Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35mOption<f32>\u001b[0m\u001b[0m, _>`\u001b[0m\n\u001b[0m               found enum `std::result::Result<\u001b[0m\u001b[0m\u001b[1m\u001b[35mf32\u001b[0m\u001b[0m, _>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `config`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/encoding.rs","byte_start":26996,"byte_end":27002,"line_start":886,"line_end":886,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn from_config(config: EncodingConfig) -> Self {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/encoding.rs","byte_start":26996,"byte_end":27002,"line_start":886,"line_end":886,"column_start":24,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn from_config(config: EncodingConfig) -> Self {","highlight_start":24,"highlight_end":30}],"label":null,"suggested_replacement":"_config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/encoding.rs:886:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_config(config: EncodingConfig) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_config`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8241,"byte_end":8244,"line_start":276,"line_end":276,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::sparse::SparseConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8241,"byte_end":8244,"line_start":276,"line_end":276,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::sparse::SparseConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/error.rs:276:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(err: crate::connectivity::sparse::SparseConnectivityError) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8479,"byte_end":8482,"line_start":282,"line_end":282,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::matrix::MatrixConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8479,"byte_end":8482,"line_start":282,"line_end":282,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::matrix::MatrixConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/error.rs:282:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(err: crate::connectivity::matrix::MatrixConnectivityError) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8715,"byte_end":8718,"line_start":288,"line_end":288,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::graph::GraphConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8715,"byte_end":8718,"line_start":288,"line_end":288,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::graph::GraphConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/error.rs:288:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(err: crate::connectivity::graph::GraphConnectivityError) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8958,"byte_end":8961,"line_start":294,"line_end":294,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::hypergraph::HypergraphConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/error.rs","byte_start":8958,"byte_end":8961,"line_start":294,"line_end":294,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::connectivity::hypergraph::HypergraphConnectivityError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/error.rs:294:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m294\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(err: crate::connectivity::hypergraph::HypergraphConnectivityError) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `connection`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/connectivity/hypergraph.rs","byte_start":6214,"byte_end":6224,"line_start":196,"line_end":196,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        connection: Self::ConnectionId,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/hypergraph.rs","byte_start":6214,"byte_end":6224,"line_start":196,"line_end":196,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        connection: Self::ConnectionId,","highlight_start":9,"highlight_end":19}],"label":null,"suggested_replacement":"_connection","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `connection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/hypergraph.rs:196:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        connection: Self::ConnectionId,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/connectivity/types.rs","byte_start":11409,"byte_end":11412,"line_start":357,"line_end":357,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::error::SHNNError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/connectivity/types.rs","byte_start":11409,"byte_end":11412,"line_start":357,"line_end":357,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    fn from(err: crate::error::SHNNError) -> Self {","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"_err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `err`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/connectivity/types.rs:357:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn from(err: crate::error::SHNNError) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `lif_config`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":4940,"byte_end":4950,"line_start":151,"line_end":151,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let lif_config = self.neuron_config.lif_config.clone().unwrap_or_default();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/builder.rs","byte_start":4940,"byte_end":4950,"line_start":151,"line_end":151,"column_start":13,"column_end":23,"is_primary":true,"text":[{"text":"        let lif_config = self.neuron_config.lif_config.clone().unwrap_or_default();","highlight_start":13,"highlight_end":23}],"label":null,"suggested_replacement":"_lif_config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `lif_config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/builder.rs:151:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let lif_config = self.neuron_config.lif_config.clone().unwrap_or_default();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_lif_config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":10860,"byte_end":10861,"line_start":332,"line_end":332,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"            .map_err(|e| SHNNError::generic(\"Connectivity validation failed\"))?;","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":10860,"byte_end":10861,"line_start":332,"line_end":332,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"            .map_err(|e| SHNNError::generic(\"Connectivity validation failed\"))?;","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/mod.rs:332:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .map_err(|e| SHNNError::generic(\"Connectivity validation failed\"))?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `current_weight`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":17134,"byte_end":17148,"line_start":540,"line_end":540,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        current_weight: f32,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"crates/shnn-core/src/network/mod.rs","byte_start":17134,"byte_end":17148,"line_start":540,"line_end":540,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        current_weight: f32,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"_current_weight","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `current_weight`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcrates/shnn-core/src/network/mod.rs:540:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        current_weight: f32,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_current_weight`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 12 previous errors; 18 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 12 previous errors; 18 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0592.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0592.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
